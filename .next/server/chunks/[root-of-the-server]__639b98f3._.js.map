{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///Users/camilamota/Developer/app-astroglix/src/app/api/get-report/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { readFile, unlink } from 'fs/promises'\nimport { join } from 'path'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const paymentId = searchParams.get('payment_id')\n\n    if (!paymentId) {\n      return NextResponse.json({\n        success: false,\n        error: 'ID de pagamento n√£o fornecido'\n      }, { status: 400 })\n    }\n\n    console.log('üîç Buscando dados para paymentId:', paymentId)\n\n    // Buscar dados salvos pelo payment_id exato\n    const filePath = join(process.cwd(), 'tmp', `${paymentId}.json`)\n    \n    try {\n      const fileContent = await readFile(filePath, 'utf-8')\n      const savedData = JSON.parse(fileContent)\n      \n      console.log('‚úÖ Dados encontrados para:', paymentId)\n      \n      // Retornar dados para gerar o relat√≥rio\n      return NextResponse.json({\n        success: true,\n        data: savedData\n      })\n      \n    } catch (fileError) {\n      console.log('‚ö†Ô∏è Arquivo espec√≠fico n√£o encontrado, tentando buscar arquivo mais recente...')\n      \n      // Se n√£o encontrou o arquivo espec√≠fico, buscar o mais recente na pasta tmp\n      try {\n        const fs = require('fs')\n        const tmpDir = join(process.cwd(), 'tmp')\n        const files = fs.readdirSync(tmpDir).filter((file: string) => file.endsWith('.json') && file.startsWith('kirvano_'))\n        \n        if (files.length === 0) {\n          throw new Error('Nenhum arquivo encontrado')\n        }\n        \n        // Ordenar por timestamp (mais recente primeiro)\n        files.sort((a: string, b: string) => {\n          const timeA = parseInt(a.split('_')[1]) || 0\n          const timeB = parseInt(b.split('_')[1]) || 0\n          return timeB - timeA\n        })\n        \n        // Pegar o arquivo mais recente\n        const latestFile = files[0]\n        const latestFilePath = join(tmpDir, latestFile)\n        const latestFileContent = await readFile(latestFilePath, 'utf-8')\n        const latestData = JSON.parse(latestFileContent)\n        \n        console.log('‚úÖ Usando arquivo mais recente:', latestFile)\n        \n        return NextResponse.json({\n          success: true,\n          data: latestData\n        })\n        \n      } catch (fallbackError) {\n        console.error('‚ùå Erro ao buscar arquivo mais recente:', fallbackError)\n        return NextResponse.json({\n          success: false,\n          error: 'Dados n√£o encontrados ou expirados'\n        }, { status: 404 })\n      }\n    }\n\n  } catch (error) {\n    console.error('üí• Erro na API get-report:', error)\n    \n    return NextResponse.json({\n      success: false,\n      error: 'Erro interno do servidor'\n    }, { status: 500 })\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const paymentId = searchParams.get('payment_id')\n\n    if (!paymentId) {\n      return NextResponse.json({\n        success: false,\n        error: 'ID de pagamento n√£o fornecido'\n      }, { status: 400 })\n    }\n\n    // Limpar dados tempor√°rios ap√≥s gerar o relat√≥rio\n    const filePath = join(process.cwd(), 'tmp', `${paymentId}.json`)\n    \n    try {\n      await unlink(filePath)\n      console.log('üóëÔ∏è Dados tempor√°rios removidos para:', paymentId)\n      \n      return NextResponse.json({\n        success: true,\n        message: 'Dados removidos com sucesso'\n      })\n      \n    } catch (fileError) {\n      console.error('‚ö†Ô∏è Erro ao remover arquivo:', fileError)\n      return NextResponse.json({\n        success: false,\n        error: 'Erro ao limpar dados tempor√°rios'\n      }, { status: 500 })\n    }\n\n  } catch (error) {\n    console.error('üí• Erro na API delete-report:', error)\n    \n    return NextResponse.json({\n      success: false,\n      error: 'Erro interno do servidor'\n    }, { status: 500 })\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}